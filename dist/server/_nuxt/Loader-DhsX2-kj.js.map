{"version":3,"file":"Loader-DhsX2-kj.js","sources":["../../../../stores/Auth.js","../../../../stores/Loader.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\nexport const useAuthStore = defineStore('auth', {\r\n    state: () => ({\r\n        isAuthenticated: false,\r\n        accessToken: '',\r\n        refreshToken: '',\r\n        errorMessage: '',\r\n    }),\r\n    actions: {\r\n        setAuthentication(status) {\r\n            this.isAuthenticated = status;\r\n        },\r\n        setAccessToken(token) {\r\n            localStorage.setItem('accessToken', JSON.stringify(token));\r\n        },\r\n        setRefreshToken(token) {\r\n            localStorage.setItem('refreshToken', JSON.stringify(token));\r\n        },\r\n        setError(message) {\r\n            this.errorMessage = message;\r\n        },\r\n        async authenticateUser(username, password) {\r\n            try {\r\n                const response = await fetch('https://trello.backend.tests.nekidaem.ru/api/v1/users/token/', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ username, password }),\r\n                });\r\n                if (response.ok){\r\n                    const data = await response.json();\r\n                    this.setAccessToken(data.access);\r\n                    this.setRefreshToken(data.refresh);\r\n                    this.setAuthentication(true);\r\n                    return true;\r\n                } else {\r\n                    const error = await response.json();\r\n                    if (error.password) {\r\n                        this.setError(error.password[0])\r\n                    } else if (error.username){\r\n                        this.setError(error.username[0])\r\n                    } else if (error.detail){\r\n                        this.setError('Неправильное Имя аккаунта или Пароль')\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error('Authentication error:', error);\r\n            }\r\n        },\r\n        async createUser(username, email, password) {\r\n            try {\r\n                const response = await fetch('https://trello.backend.tests.nekidaem.ru/api/v1/users/create/', {\r\n                    method: \"POST\",\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({username, email, password})\r\n                })\r\n                if (response.ok) {\r\n                    return true;\r\n                } else {\r\n                    const error = await response.json();\r\n                    if (error.password) {\r\n                        this.setError(error.password[0])\r\n                    } else if (error.email){\r\n                        this.setError(error.email[0])\r\n                    } else if (error.username){\r\n                        this.setError(error.username[0])\r\n                    }\r\n                    return false;\r\n                }\r\n            } catch (error) {\r\n                this.setError(\"Сетевая ошибка при попытке регистрации\");\r\n                console.error('Registration error:', error);\r\n                return false;\r\n            }\r\n        },\r\n        logout(){\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n            this.setAuthentication(false);\r\n        }\r\n    },\r\n});\r\n","import {defineStore} from \"pinia\";\r\n\r\nexport const useLoaderStore = defineStore('loader', {\r\n    state: () => ({\r\n        isLoading: false\r\n    }),\r\n    actions: {\r\n        toggleIsLoading(status){\r\n            this.isLoading = status;\r\n        }\r\n    }\r\n})"],"names":[],"mappings":";AAEY,MAAC,eAAe,YAAY,QAAQ;AAAA,EAC5C,OAAO,OAAO;AAAA,IACV,iBAAiB;AAAA,IACjB,aAAa;AAAA,IACb,cAAc;AAAA,IACd,cAAc;AAAA,EACtB;AAAA,EACI,SAAS;AAAA,IACL,kBAAkB,QAAQ;AACtB,WAAK,kBAAkB;AAAA,IAC1B;AAAA,IACD,eAAe,OAAO;AAClB,mBAAa,QAAQ,eAAe,KAAK,UAAU,KAAK,CAAC;AAAA,IAC5D;AAAA,IACD,gBAAgB,OAAO;AACnB,mBAAa,QAAQ,gBAAgB,KAAK,UAAU,KAAK,CAAC;AAAA,IAC7D;AAAA,IACD,SAAS,SAAS;AACd,WAAK,eAAe;AAAA,IACvB;AAAA,IACD,MAAM,iBAAiB,UAAU,UAAU;AACvC,UAAI;AACA,cAAM,WAAW,MAAM,MAAM,gEAAgE;AAAA,UACzF,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,gBAAgB;AAAA,UACnB;AAAA,UACD,MAAM,KAAK,UAAU,EAAE,UAAU,SAAQ,CAAE;AAAA,QAC/D,CAAiB;AACD,YAAI,SAAS,IAAG;AACZ,gBAAM,OAAO,MAAM,SAAS;AAC5B,eAAK,eAAe,KAAK,MAAM;AAC/B,eAAK,gBAAgB,KAAK,OAAO;AACjC,eAAK,kBAAkB,IAAI;AAC3B,iBAAO;AAAA,QAC3B,OAAuB;AACH,gBAAM,QAAQ,MAAM,SAAS;AAC7B,cAAI,MAAM,UAAU;AAChB,iBAAK,SAAS,MAAM,SAAS,CAAC,CAAC;AAAA,UACvD,WAA+B,MAAM,UAAS;AACtB,iBAAK,SAAS,MAAM,SAAS,CAAC,CAAC;AAAA,UACvD,WAA+B,MAAM,QAAO;AACpB,iBAAK,SAAS,sCAAsC;AAAA,UACvD;AACD,iBAAO;AAAA,QACV;AAAA,MAEJ,SAAQ,OAAO;AACZ,gBAAQ,MAAM,yBAAyB,KAAK;AAAA,MAC/C;AAAA,IACJ;AAAA,IACD,MAAM,WAAW,UAAU,OAAO,UAAU;AACxC,UAAI;AACA,cAAM,WAAW,MAAM,MAAM,iEAAiE;AAAA,UAC1F,QAAQ;AAAA,UACR,SAAS,EAAC,gBAAgB,mBAAkB;AAAA,UAC5C,MAAM,KAAK,UAAU,EAAC,UAAU,OAAO,SAAQ,CAAC;AAAA,QACpE,CAAiB;AACD,YAAI,SAAS,IAAI;AACb,iBAAO;AAAA,QAC3B,OAAuB;AACH,gBAAM,QAAQ,MAAM,SAAS;AAC7B,cAAI,MAAM,UAAU;AAChB,iBAAK,SAAS,MAAM,SAAS,CAAC,CAAC;AAAA,UACvD,WAA+B,MAAM,OAAM;AACnB,iBAAK,SAAS,MAAM,MAAM,CAAC,CAAC;AAAA,UACpD,WAA+B,MAAM,UAAS;AACtB,iBAAK,SAAS,MAAM,SAAS,CAAC,CAAC;AAAA,UAClC;AACD,iBAAO;AAAA,QACV;AAAA,MACJ,SAAQ,OAAO;AACZ,aAAK,SAAS,wCAAwC;AACtD,gBAAQ,MAAM,uBAAuB,KAAK;AAC1C,eAAO;AAAA,MACV;AAAA,IACJ;AAAA,IACD,SAAQ;AACJ,mBAAa,WAAW,aAAa;AACrC,mBAAa,WAAW,cAAc;AACtC,WAAK,kBAAkB,KAAK;AAAA,IAC/B;AAAA,EACJ;AACL,CAAC;ACnFW,MAAC,iBAAiB,YAAY,UAAU;AAAA,EAChD,OAAO,OAAO;AAAA,IACV,WAAW;AAAA,EACnB;AAAA,EACI,SAAS;AAAA,IACL,gBAAgB,QAAO;AACnB,WAAK,YAAY;AAAA,IACpB;AAAA,EACJ;AACL,CAAC;"}